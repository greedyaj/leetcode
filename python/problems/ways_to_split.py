"""
A split of an integer array is good if:
The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.
Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.

Example 1:

Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].
Example 2:

Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]
Example 3:

Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.
 
Constraints:
3 <= nums.length <= 105
0 <= nums[i] <= 104
"""

class TwoSplitList:
    def __init__(self, left, right):
        self.left = left
        self.right = right

    def __hash__(self) -> int:
        return len(self.left) - len(self.right)

    def __eq__(self, other: object) -> bool:
        """Overrides the default implementation"""
        if isinstance(other, TwoSplitList):
            return self.left == other.left and self.right == other.right
        return False
    
    def __str__(self) -> str:
        f"{self.left} {self.right}"
    

class ThreeSplitList(TwoSplitList):
    def __init__(self, left, middle, right):
        TwoSplitList.__init__(self, left, right)
        self.middle = middle

    def __hash__(self) -> int:
        return len(self.middle) - TwoSplitList.__hash__(self)

    def __eq__(self, other: object) -> bool:
        """Overrides the default implementation"""
        if isinstance(other, ThreeSplitList):
            return self.middle == other.middle and TwoSplitList.__eq__(self, other)
        return False

    def __str__(self) -> str:
        f"{self.left} {self.middle} {self.right}"

class Solution:
    def waysToSplit(self, nums: list[int]) -> int:
        twoSplittedLists: set[TwoSplitList] = self.splitList(nums, (lambda l: True))
        threeWaySplittedLists: set[ThreeSplitList] = set()
        for eachSplit in twoSplittedLists:
            leftSplittedLists: set[TwoSplitList] = self.splitList(eachSplit.left, (lambda l: True))
            [threeWaySplittedLists.add(
                ThreeSplitList(eachLeftSplitted.left, eachLeftSplitted.right, eachSplit.right))
                for eachLeftSplitted in leftSplittedLists]

            rightSplittedLists: set[TwoSplitList] = self.splitList(eachSplit.right, (lambda l: l >= sum(eachSplit.left)))
            [threeWaySplittedLists.add(
                ThreeSplitList(eachSplit.left, eachRightSplitted.left, eachRightSplitted.right))
                for eachRightSplitted in rightSplittedLists]

        if len(threeWaySplittedLists) < 10:
            [self.printWay(way) for way in threeWaySplittedLists]
        return len(threeWaySplittedLists)
    
    def splitList(self, nums: list[int], limitter) -> set[TwoSplitList]:
        twoSplittedLists: set[TwoSplitList] = set()
        if (len(nums) > 1):
            for index in range(1, len(nums)):
                leftList: list = nums[:index]
                rightList: list = nums[index:]
                if (sum(leftList) <= sum(rightList) and limitter(sum(leftList))):
                    twoSplittedLists.add(TwoSplitList(leftList, rightList))
                elif (sum(leftList) > sum(rightList)):
                    break
        return twoSplittedLists

    def printWay(self, way: ThreeSplitList):
        print(f"{str(way.left)} {str(way.middle)} {str(way.right)}")

solution = Solution()
print(solution.waysToSplit([1,1,1]))
print(solution.waysToSplit([1,2,2,2,5,0]))
print(solution.waysToSplit([3,2,1]))
print(solution.waysToSplit([9454,2500,8306,1085,6443,4135,4028,1670,6895,2899,4019,3312,5159,2104,1765,8073,6290,7803,7306,2904,9504,5529,15,6162,7581,437,6831,3785,1819,4934,7359,8186,9313,4553,1181,7140,4004,6258,5605,4771,6301,7069,9428,5673,3757,5950,9799,3387,133,695,8221,9628,4553,1348,2720,4898,7543,6085,8371,9865,3202,3573,686,9733,9268,3880,9410,7955,7666,7437,6922,5525,2557,4151,3268,6233,2483,8580,3738,1093,4686,9832,6351,3383,683,575,1121,8671,5948,6172,256,4129,2526,7855,3961,2388,9889,384,952,6790,8931,3253,3070,1714,4602,6492,4357,90,3111,6391,2983,6903,9618,4351,9853,230,2681,691,8056,3610,2907,2144,7398,81,7014,836,9313,6186,4723,401,126,4120,7310,6728,5469,2593,7625,6249,7837,8663,8999,1886,6909,7955,6421,4764,5394,796,6855,8023,8686,3501,9002,4222,8237,8168,4251,6505,5618,8687,123,1414,9980,8431,9988,6612,9943,7484,1752,7155,9266,9465,6207,9130,8482,309,2065,9407,9784,3414,547,7770,4467,9879,8386,1113,5372,5063,97,9121,4221,4040,3927,7658,9573,1998,8432,5638,5294,423,2388,8798,8339,5084,7220,2215,7979,7694,9123,4882,1581,7197,8561,7287,7077,7963,6198,1180,93,4384,8353,3019,5434,3603,5964,3620,3069,5340,2719,9403,9394,3736,2193,7592,4211,8143,252,7803,6237,8679,458,989,8510,7973,2371,6113,8356,4553,6704,846,1079,9735,5574,562,1900,852,7005,846,3723,3755,9735,3042,2640,4912,7665,9775,5796,640,8346,792,4351,3306,8234,4041,4506,33,2647,9941,373,565,6291,5616,2045,1540,6068,2014,3370,2031,8467,7990,8491,4374,3930,4920,1899,9641,2283,8090,6737,1438,8652,6542,2171,2622,4724,7374,8079,9087,4172,3721,6564,4667,3799,9473,8754,914,2887,309,2927,507,9115,4413,1811,3305,6312,2697,650,1509,5140,2645,3651,4358,8532,2236,2013,4765,6945,6703,2598,8213,4,6757,1989,2037,1172,9663,3996,9510,9226,3424,7902,1768,5241,9459,7249,7521,7596,268,8367,1015,4410,7034,6727,6991,9711,3227,548,7546,4255,9801,5435,2643,7040,3298,9005,2721,5521,2079,8606,2969,1687,552,9491,8949,3976,1061,2179,5506,611,1668,470,5836,1436,2834,9042,5542,2407,7445,8120,7856,9404,2895,6072,4100,8103,1369,9674,9018,2705,4947,5612,5136,4390,1198,9263,6345,9228,7801,2213,2175,1689,2898,2381,5716,1796,4652,7079,8072,4360,9332,3482,7748,7947,9189,5385,8165,8006,2817,7421,7571,3806,4251,4656,4896,5443,9833,7420,7983,5767,9627,2403,1861,8796,7488,462,7638,6970,4716,3265,2776,9654,239,8143,192,3525,176,6848,7193,4745,6188,202,8691,1812,5493,4120,6297,9376,5156,1885,2442,2745,4406,9125,9853,6772,8011,9884,1932,1702,9338,8226,8927,3580,3335,9681,1192,5913,3280,308,8582,5933,6641,6125,1023,3614,878,2404,6430,7203,1596,6245,190,7040,7611,3235,8602,3102,5752,2078,6325,6684,2447,6477,2917,2957,7806,9725,9520,9844,309,1379,1335,1875,6287,8594,4963,8483,4779,340,5016,9267,3333,5497,8029,7945,4364,2302,5375,3775,3342,7974,1034,2738,751,5731,1869,6738,8941,9105,7891,9808,3354,9832,3832,1497,9528,2518,814,5489,183,1620,2978,787,5977,8072,6544,7281,3906,4701,1874,7599,1458,7981,5445,5472,8222,3594,1891,8518,148,2851,3853,4575,5625,4190,503,1850,7391,102,3313,6281,2509,192,6371,6199,9862,6771,8234,3567,3691,6623,6363,4647,8274,7573,4957,776,1916,651,3678,2204,2706,7368,8564,4369,2009,9024,8350,8038,9791,2324,7391,5094,4,1797,5381,9126,2515,2202,8438,7579,770,2900,5669,8609,4962,4832,3805,7726,9037,2745,9367,3470,1422,8804,372,6456,7449,246,1116,3793,1605,6932,9175,4850,5726,995,1187,5059,8637,2333,590,5068,782,9371,7351,2657,8723,4228,2957,9058,6680,9453,9813,1248,7571,2307,6917,1463,2396,4902,1130,7577,7345,8328,1864,2485,868,1316,2744,227,8725,4977,9112,2741,2152,8955,2381,4034,6343,5850,4261,7520,5471,3887,359,9007,2342,6273,7071,7959,7015,6860,2208,4894,8355,3435,7556,5780,5610,6510,6914,5060,62,743,4192,833,7443,3886,6909,5983,7307,5910,7177,6447,4198,7353,5751,5319,3855,9638,4111,9992,1890,214,3502,2567,7037,7127,3420,3920,1248,5504,6900,3993,9380,141,6435,8888,9480,5387,2556,5270,3104,414,2749,9240,1966,7126,2342,5609,7084,9636,4751,6416,287,3574,4267,7693,8342,6490,5535,9069,6529,4401,9008,5176,6921,731,7403,6812,7807,8370,2040,1281,4787,2194,3816,6574,1542,1257,6216,2479,4959,7874,1014,7135,2141,8286,5755,5656,5146,8412,6687,2538,7439,8062,5888,7560,2444,81,4061,3885,8117,7818,8278,20,9165,5153,2043,4898,271,8414,8254,580,5428,5243,6312,3671,9396,8411,1530,5920,4703,3302,8645,5092,4164,3686,3883,2001,4136,9535,5957,344,4127,8148,987,7960,1024,6447,827,8596,4381,8915,5226,9437,9898,8759,9652,5952,9098,7830,4206,5397,550,5348,4264,5687,9791,3869,7177,4362,8049,8439,2937,7473,9380,7304,3166,4873,5013,266,5190,2586,4693,229,5571,9932,9442,2121,9130,233,4049,8274,1886,9147,7456,3713,2769,382,8399,3706,2778,1884,1438,5899,6004,4820,3865,3070,271,5083,3091,4589,3422,473,3157,6516,4028,9929,5733,3510,6403,8202,7565,492,5358,9778,8375,3151,4971,5336,7622,7091,5949,9918,7635,9627,223,3544,21,9140,4927,128,3970,1770,3005,1437,8630,9883,4,1727,3074,6501,8129,4043,6320,6022,4890,6344,9655,483,2914,620,7057,7233,2914,2153,8039,4552,7130,1305,9785,7964,3793,8613,975,1319,6786,8280,3170,893,1911,190,7893,6493,1879,7350,8484,4120,4386,389,9250,636,6573,9500,1463,9267,2744,8857,7746,7554,8014,4990,9132,9631,6474,5294,3984,6495,7236,830,1947,4135,8869,5096,3141,3463,450,4930,7864,9807,8699,8213,778,3501,3052,7102,9331,4777,6494,8682,5170,5435,5231,717,4211,891,489,6878,6910,9184,6287,4875,1198,6128,9074,5786,7888,7511,5720,4845,2226,4353,5131,9046,1509,9519,9163,1515,698,127,8616,2918,8288,6171,5358,6929,5196,771,2805,4472,3531,4500,4349,473,6913,1232,4513,9320,9190,1857,9944,5144,1860,6586,1592,2302,7232,9339,5889,1617,3973,4664,9413]))